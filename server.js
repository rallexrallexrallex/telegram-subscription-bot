const express = require('express');
const axios = require('axios');
const mongoose = require('mongoose');
const app = express();

// –ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
const subscriptionSchema = new mongoose.Schema({
  telegramId: { type: Number, required: true },
  username: { type: String },
  firstName: { type: String },
  plan: { type: String, required: true },
  startDate: { type: Date, default: Date.now },
  endDate: { type: Date, required: true },
  status: { type: String, default: 'active' }
});

const Subscription = mongoose.model('Subscription', subscriptionSchema);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    BOT_TOKEN: process.env.BOT_TOKEN || '8133681784:AAG5tcJJocTSLLvyGtDjrbEU3KqwXAdEPPo',
    CHANNEL_USERNAME: process.env.CHANNEL_USERNAME || 'botsy22',
    MONGODB_URI: process.env.MONGODB_URI,
    LAVA_SECRET: process.env.LAVA_SECRET || '2RSVMGXlZOamUFhRKgraq9cbDmVWjzuV1fgOIPuAFGQ7Eeu18vK0yng32vklu6AI'
};

app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectDB() {
    try {
        await mongoose.connect(CONFIG.MONGODB_URI);
        console.log('‚úÖ Connected to MongoDB');
    } catch (error) {
        console.error('‚ùå MongoDB error:', error);
    }
}
connectDB();

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ Telegram Subscription Bot</h1>
        <p>–°—Ç–∞—Ç—É—Å: <strong>–†–∞–±–æ—Ç–∞–µ—Ç</strong></p>
        <p>–ö–∞–Ω–∞–ª: @${CONFIG.CHANNEL_USERNAME}</p>
        <p>Webhook URL: ${req.protocol}://${req.get('host')}/lava-webhook</p>
    `);
});

// Webhook –æ—Ç Lava.Top
app.post('/lava-webhook', async (req, res) => {
    try {
        console.log('üí∞ Webhook –æ—Ç Lava:', req.body);
        
        const { status, order_id, custom_fields } = req.body;
        
        if (status === 'success') {
            const fields = JSON.parse(custom_fields || '{}');
            const telegramId = fields.telegram_id;
            const planName = fields.plan;
            const firstName = fields.first_name;
            const username = fields.user_username;
            
            if (telegramId) {
                console.log(`‚úÖ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞: ${telegramId} - ${planName}`);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                const endDate = calculateEndDate(planName);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                const subscription = new Subscription({
                    telegramId: parseInt(telegramId),
                    username: username,
                    firstName: firstName,
                    plan: planName,
                    endDate: endDate
                });
                await subscription.save();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                await addToChannel(telegramId, firstName);
                
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ ${endDate}`);
            }
        }
        
        res.json({ status: 'success' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
        res.status(500).json({ error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
function calculateEndDate(planName) {
    const now = new Date();
    switch(planName) {
        case '1month':
            return new Date(now.setMonth(now.getMonth() + 1));
        case '6months':
            return new Date(now.setMonth(now.getMonth() + 6));
        case '12months':
            return new Date(now.setMonth(now.getMonth() + 12));
        default:
            return new Date(now.setMonth(now.getMonth() + 1));
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
async function addToChannel(userId, firstName) {
    try {
        const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/addChatMember`;
        
        const response = await axios.post(url, {
            chat_id: CONFIG.CHANNEL_USERNAME,
            user_id: parseInt(userId)
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendMessage(userId,
            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${firstName}!\n\n` +
            `‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É: @${CONFIG.CHANNEL_USERNAME}\n\n` +
            `üíé –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!`
        );
        
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error.response?.data);
        throw error;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
async function removeFromChannel(userId) {
    try {
        const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/banChatMember`;
        
        const response = await axios.post(url, {
            chat_id: CONFIG.CHANNEL_USERNAME,
            user_id: parseInt(userId)
        });
        
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:', error.response?.data);
        throw error;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text) {
    try {
        const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`;
        
        await axios.post(url, {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async function checkExpiredSubscriptions() {
    try {
        const expiredSubs = await Subscription.find({
            endDate: { $lt: new Date() },
            status: 'active'
        });
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: –Ω–∞–π–¥–µ–Ω–æ ${expiredSubs.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö`);
        
        for (const sub of expiredSubs) {
            await removeFromChannel(sub.telegramId);
            
            sub.status = 'expired';
            await sub.save();
            
            console.log(`‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ ${sub.telegramId} –∏—Å—Ç–µ–∫–ª–∞ –∏ —É–¥–∞–ª–µ–Ω–∞`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(checkExpiredSubscriptions, 6 * 60 * 60 * 1000);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì¢ –ö–∞–Ω–∞–ª: @${CONFIG.CHANNEL_USERNAME}`);
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    setTimeout(checkExpiredSubscriptions, 60000);
});
