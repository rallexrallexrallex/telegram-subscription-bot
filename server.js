const express = require('express');
const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();
const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    BOT_TOKEN: '8133681784:AAG5tcJJocTSLLvyGtDjrbEU3KqwXAdEPPo',
    CHANNEL_USERNAME: 'botsy22',
    LAVA_SECRET: '2RSVMGXlZOamUFhRKgraq9cbDmVWjzuV1fgOIPuAFGQ7Eeu18vK0yng32vklu6AI'
};

app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã
const db = new sqlite3.Database('/tmp/subscriptions.db');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER NOT NULL UNIQUE,
        username TEXT,
        first_name TEXT,
        plan TEXT NOT NULL,
        start_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        end_date DATETIME NOT NULL,
        status TEXT DEFAULT 'active'
    )`);
    console.log('‚úÖ SQLite –±–∞–∑–∞ –≥–æ—Ç–æ–≤–∞');
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ Telegram Subscription Bot</h1>
        <p>–°—Ç–∞—Ç—É—Å: <strong>‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</strong></p>
        <p>–ö–∞–Ω–∞–ª: @${CONFIG.CHANNEL_USERNAME}</p>
        <p>Webhook URL: ${req.protocol}://${req.get('host')}/lava-webhook</p>
        <p>üëá –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ Lava.Top ‚Üí Webhook</p>
    `);
});

// Webhook –æ—Ç Lava.Top
app.post('/lava-webhook', async (req, res) => {
    try {
        console.log('üí∞ Webhook –æ—Ç Lava:', JSON.stringify(req.body, null, 2));
        
        const { status, custom_fields } = req.body;
        
        if (status === 'success') {
            const fields = JSON.parse(custom_fields || '{}');
            const telegramId = fields.telegram_id;
            const planName = fields.plan;
            const firstName = fields.first_name;
            const username = fields.user_username;
            
            if (telegramId) {
                console.log(`‚úÖ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞: ${telegramId} - ${planName}`);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                const endDate = calculateEndDate(planName);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
                db.run(
                    `INSERT OR REPLACE INTO subscriptions 
                     (telegram_id, username, first_name, plan, end_date, status) 
                     VALUES (?, ?, ?, ?, ?, 'active')`,
                    [telegramId, username, firstName, planName, endDate.toISOString()],
                    function(err) {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã:', err);
                        } else {
                            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è ${telegramId}`);
                        }
                    }
                );
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                await addToChannel(telegramId, firstName, planName);
                
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ ${endDate}`);
            }
        }
        
        res.json({ status: 'success', message: 'Webhook processed' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
        res.status(500).json({ error: error.message });
    }
});

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
function calculateEndDate(planName) {
    const now = new Date();
    switch(planName) {
        case '1month':
            return new Date(now.setMonth(now.getMonth() + 1));
        case '6months':
            return new Date(now.setMonth(now.getMonth() + 6));
        case '12months':
            return new Date(now.setMonth(now.getMonth() + 12));
        default:
            return new Date(now.setMonth(now.getMonth() + 1));
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
async function addToChannel(userId, firstName, planName) {
    try {
        const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/addChatMember`;
        
        const response = await axios.post(url, {
            chat_id: CONFIG.CHANNEL_USERNAME,
            user_id: parseInt(userId)
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', response.data);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendMessage(userId,
            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${firstName}!\n\n` +
            `‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É: @${CONFIG.CHANNEL_USERNAME}\n\n` +
            `üíé –¢–∞—Ä–∏—Ñ: ${getPlanText(planName)}\n` +
            `‚è∞ –°—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞: ${getDurationText(planName)}\n\n` +
            `üíé –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!`
        );
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', error.response?.data);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sendMessage(userId,
            `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª.\n\n` +
            `üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @SanjarYunusov_bot\n\n` +
            `–í–∞—à ID: ${userId}`
        );
    }
}

// –¢–µ–∫—Å—Ç –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞
function getPlanText(planName) {
    switch(planName) {
        case '1month': return '1 –º–µ—Å—è—Ü';
        case '6months': return '6 –º–µ—Å—è—Ü–µ–≤';
        case '12months': return '12 –º–µ—Å—è—Ü–µ–≤';
        default: return planName;
    }
}

// –¢–µ–∫—Å—Ç –æ —Å—Ä–æ–∫–µ –¥–æ—Å—Ç—É–ø–∞
function getDurationText(planName) {
    switch(planName) {
        case '1month': return '1 –º–µ—Å—è—Ü';
        case '6months': return '6 –º–µ—Å—è—Ü–µ–≤';
        case '12months': return '12 –º–µ—Å—è—Ü–µ–≤';
        default: return '1 –º–µ—Å—è—Ü';
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
async function removeFromChannel(userId) {
    try {
        const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/banChatMember`;
        
        await axios.post(url, {
            chat_id: CONFIG.CHANNEL_USERNAME,
            user_id: parseInt(userId),
            revoke_messages: true
        });
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error.response?.data);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text) {
    try {
        const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`;
        
        await axios.post(url, {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', chatId);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
function checkExpiredSubscriptions() {
    db.all(
        `SELECT * FROM subscriptions WHERE datetime(end_date) < datetime('now') AND status = 'active'`,
        async (err, rows) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', err);
                return;
            }
            
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: ${rows.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö`);
            
            for (const sub of rows) {
                await removeFromChannel(sub.telegram_id);
                
                db.run(
                    `UPDATE subscriptions SET status = 'expired' WHERE telegram_id = ?`,
                    [sub.telegram_id],
                    function(err) {
                        if (err) console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', err);
                    }
                );
                
                console.log(`‚ùå –£–¥–∞–ª–µ–Ω: ${sub.telegram_id} (${sub.plan})`);
            }
        }
    );
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(checkExpiredSubscriptions, 6 * 60 * 60 * 1000);

// –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
setTimeout(checkExpiredSubscriptions, 60000);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì¢ –ö–∞–Ω–∞–ª: @${CONFIG.CHANNEL_USERNAME}`);
    console.log(`ü§ñ –ë–æ—Ç: ${CONFIG.BOT_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–û—à–∏–±–∫–∞'}`);
    console.log(`üíæ –ë–∞–∑–∞: SQLite`);
    console.log(`‚è∞ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤`);
});
